(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? factory(exports)
    : typeof define === 'function' && define.amd
    ? define(['exports'], factory)
    : ((global =
        typeof globalThis !== 'undefined' ? globalThis : global || self),
      factory((global.SQ = {})));
})(this, function (exports) {
  'use strict';

  class Queue {
    constructor() {
      this._fx = [];
      this._init = true;
      this._lock = false;
      this._finishDefers = new Set();
    }
    _next() {
      if (!this._lock) {
        this._lock = true;
        if (this._fx.length === 0) {
          this._init = true;
          this._finishDefers.forEach((d) => d.resolve());
          this._finishDefers.clear();
        } else {
          const fn = this._fx.shift();
          if (fn) {
            fn(() => {
              this._lock = false;
              this._next();
            });
          }
        }
      }
    }
    add(fn) {
      this._fx.push(fn);
      if (this._init) {
        this._lock = false;
        this._init = false;
        this._next();
      }
    }
    awaitFinish() {
      if (this._init) return Promise.resolve();
      const defer = {};
      this._finishDefers.add(defer);
      return new Promise((resolve) => {
        defer.resolve = resolve;
      });
    }
  }

  exports.Queue = Queue;
});
