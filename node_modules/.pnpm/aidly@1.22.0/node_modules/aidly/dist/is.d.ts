import type { TypedArray, PrimitiveType, PhoneLocales } from './types';
export declare const supportWasm: boolean;
export declare const toRawType: (v: unknown) => string;
export declare const isArray: (arg: any) => arg is any[];
export declare const isBrowser: boolean;
export declare const isNil: (v: unknown) => v is null | undefined;
export declare const isObject: (v: unknown) => v is object;
export declare const isNumber: (v: any) => v is number;
export declare const isString: (v: unknown) => v is string;
export declare const isPort: (n: number) => boolean;
export declare const isDate: (v: unknown) => v is Date;
export declare const isRegExp: (v: unknown) => v is RegExp;
export declare const isPromise: <T, S>(v: Promise<T> | S) => v is Promise<T>;
export declare const isPromiseLike: <T, S>(
  v: PromiseLike<T> | S,
) => v is PromiseLike<T>;
export declare const isPlainObject: <T>(
  v: unknown,
) => v is Record<PropertyKey, T>;
export declare const isFunction: <T extends unknown>(
  v: T,
) => v is T extends Function ? T : Extract<T, Function>;
export declare const isAbsolute: (p: string) => boolean;
export declare const isWindow: (val: any) => boolean;
export declare const isTypedArray: (val: unknown) => val is TypedArray;
export declare const isSet: <T = unknown>(v: unknown) => v is Set<T>;
export declare const isWeakSet: <T extends object = object>(
  v: unknown,
) => v is WeakSet<T>;
export declare const isMap: <K = unknown, V = unknown>(
  v: unknown,
) => v is Map<K, V>;
export declare const isWeakMap: <K extends object = object, V = unknown>(
  v: unknown,
) => v is WeakMap<K, V>;
export declare const isBuffer: (v: unknown) => boolean;
export declare const isInBounds: ([a, b]: Array<number>, v: number) => boolean;
export declare const isEmptyObject: <T extends Record<PropertyKey, any>>(
  val: T,
) => boolean;
export declare const isPrimitiveValue: (v: unknown) => v is PrimitiveType;
export declare const isWhitespace: (
  char: string,
) => char is ' ' | '\t' | '\n' | '\r' | '\f' | '\v';
export declare const isByteLength: (
  val: string,
  options?: {
    max?: number;
    min?: number;
  },
) => boolean;
export declare const isBase64: (val: string, urlSafe?: boolean) => boolean;
export declare const isIP: (val: string, version?: '4' | '6') => boolean;
export declare const isDomain: (val: string) => boolean;
export declare const isPhone: (
  val: string,
  locale?: PhoneLocales | Array<PhoneLocales>,
  strictMode?: boolean,
) => boolean;
export declare const isCNPhone: (val: string, strictMode?: boolean) => boolean;
/**
 * Not verify `display_name`
 * */
export declare const isEmail: (
  val: string,
  options?: {
    disableIPDomain?: boolean;
  },
) => boolean;
