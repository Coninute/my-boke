import { type Nullable } from './index';
export interface CacheUnit<T = unknown> {
  value: T;
  size: number;
  count: number;
}
export declare function createCacheObject<T>(
  max: number,
  {
    onGet,
    onSet,
    onRemove,
    permanents,
  }?: {
    permanents?: Array<string>;
    onGet?: (key: string, unit: CacheUnit<T>) => void;
    onSet?: (key: string, unit: CacheUnit<T>) => void;
    onRemove?: (key: string, unit: CacheUnit<T>) => void;
  },
): {
  has: (key: string) => boolean;
  get: <U extends T>(key: string) => U;
  set: (
    key: string,
    value: T,
    size: number,
    force?: Nullable<boolean>,
  ) => boolean;
  max: number;
  remove: (key: string) => void;
  removeAll: () => void;
  readonly size: number;
  readonly keys: string[];
  readonly bucket: Record<string, CacheUnit<T>>;
};
